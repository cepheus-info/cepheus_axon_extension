import javax.naming.ConfigurationException

plugins {
    id 'java-library'
    id 'org.jetbrains.kotlin.jvm' version '1.5.31'
    id 'maven-publish'
    id 'signing'
    id 'org.jetbrains.dokka' version '1.5.31'
}

group = 'info.cepheus'
version = '0.0.2'
archivesBaseName = 'cepheus_axon_extension'

repositories {
    mavenCentral()
}

dependencies {
    implementation enforcedPlatform("${axonPlatformGroupId}:${axonPlatformArtifactId}:${axonPlatformVersion}")
    implementation "org.axonframework:axon-configuration"
    implementation "org.axonframework:axon-modelling"
    implementation "org.axonframework:axon-messaging"

    implementation "jakarta.transaction:jakarta.transaction-api:1.3.3"
    implementation 'jakarta.enterprise:jakarta.enterprise.cdi-api:2.0.2'
    implementation 'io.projectreactor:reactor-core:3.4.11'
}

ext {
    it.'signing.secretKeyRingFile' = project.findProperty('signing.secretKeyRingFile')
    it.'signing.password' = project.findProperty('signing.password')
    it.'signing.keyId' = project.findProperty('signing.keyId')
    it.ossrhUsername = project.findProperty('ossrhUsername')
    it.ossrhPassword = project.findProperty('ossrhPassword')
    it.ossrhStagingProfileId = project.findProperty('ossrhStagingProfileId')
}

task javadocJar(type: org.gradle.jvm.tasks.Jar) {
    group 'documentation'
    dependsOn dokkaHtml
    archiveClassifier.set('javadoc')
    from dokkaHtml.outputDirectory
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId 'info.cepheus'
            artifactId 'cepheus_axon_extension'
            version '0.0.2'

            File pomAscFile = null
            pom {
                name = 'Cepheus Axon Extension'
                description = 'A customized axon extension infrastructure'
                url = 'https://github.com/cepheus-info/cepheus_axon_extension'
                organization {
                    name = 'cepheus.info'
                    url = 'https://github.com/cepheus-info'
                }
                issueManagement {
                    system = 'GitHub'
                    url = 'https://github.com/cepheus-info/cepheus_axon_extension/issues'
                }
                licenses {
                    license {
                        name = 'MIT License'
                        url = 'https://github.com/cepheus-info/cepheus_axon_extension/blob/master/LICENSE'
                        distribution = 'repo'
                    }
                }
                developers {
                    developer {
                        id = 'wujuntaocn'
                        name = 'Juntao Wu'
                        email = 'wujuntaocn@outlook.com'
                    }
                }
                scm {
                    url = 'https://github.com/cepheus-info/cepheus_axon_extension'
                    connection = 'scm:git:git://github.com/cepheus-info/cepheus_axon_extension.git'
                    developerConnection = 'scm:git:ssh://git@github.com:cepheus-info/cepheus_axon_extension.git'
                }
            }

            pom.withXml {
                pomAscFile = signPomFile.signatureFiles[0]
            }

            artifacts {
                //noinspection GroovyAssignabilityCheck
                artifact jar
                //noinspection GroovyAssignabilityCheck
                artifact kotlinSourcesJar
                //noinspection GroovyAssignabilityCheck
                artifact javadocJar
                // pom-default.xml.asc
                pomAscFile
            }
        }
    }
    repositories {
        maven {
            name 'ossrh'
            url 'https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/'
            credentials {
                username = ossrhUsername
                password = ossrhPassword
            }
        }
    }
}

/**
 * configure signing plugin including(pom-default.xml, libs/jar)
 */
signing {
    if (project.findProperty('signing.keyId') && project.findProperty('signing.password') && project.findProperty('signing.secretKeyRingFile')) {
        sign publishing.publications.maven
        sign configurations.archives
    } else {
        throw new ConfigurationException('No signing info found.')
    }
}

/**
 * sign pom-default.xml
 */
task signPomFile(type: Sign) {
    sign project.file("$buildDir/publications/maven/pom-default.xml")
    outputs.upToDateWhen { false }
}

/**
 * add dependencies for publishToMavenLocal
 */
tasks.withType(PublishToMavenLocal) {
    dependsOn project.tasks.javadocJar
    dependsOn project.tasks.signArchives
    dependsOn project.tasks.signMavenPublication
}

/**
 * add dependencies for publishMavenPublicationToYourRepository
 */
tasks.withType(PublishToMavenRepository) {
    dependsOn project.tasks.javadocJar
    dependsOn project.tasks.signArchives
    dependsOn project.tasks.signMavenPublication
    doFirst {
        if (!ossrhUsername) {
            throw new ConfigurationException('Please set the sonatype username with project property "ossrhUsername" ')
        }
        if (!ossrhPassword) {
            throw new ConfigurationException('Please set the sonatype password with project property "ossrhPassword" ')
        }
    }
}
